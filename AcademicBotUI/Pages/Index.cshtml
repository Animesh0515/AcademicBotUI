@page
@using AcademicBotUI.Entity
@model IndexModel
@inject SignInManager<ApplicationUser> SignInManager
@{
    ViewData["Title"] = "Home";
    bool IsUserSignedIn = SignInManager.IsSignedIn(User);
}
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="https://unpkg.com/tippy.js@6/dist/tippy.css" rel="stylesheet">

<div class="chat-wrapper @(SignInManager.IsSignedIn(User) ? "" : "centered-chat")">
    @if (IsUserSignedIn)
    {
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h5 class="mb-0">Chat History</h5>
                <button id="newChatBtn" class="btn btn-sm btn-light">
                    <i class="fas fa-plus"></i> New Chat
                </button>
            </div>
            <div class="chat-history" id="chatHistory">
                @foreach (var chat in Model.UserChatHistories)  // Assuming ChatHistories is a list of chat history items in your model
                {
                    <div class="chat-history-item" data-chat-id="@chat.UserChatHistoryId">@chat.DisplayMessage</div>
                }
            </div>
            <div class="sidebar-footer">
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @(Model.IncludeEducationBackground?"checked":"")>
                    <label class="form-check-label" for="flexSwitchCheckDefault">Include Eudcation Background</label>
                </div>
            </div>
        </div>
    }
    <div class="main-content @(IsUserSignedIn ? "" : "centered-content")">
        <div class="chat-container">
            <div id="welcomeMessage" class="welcome-message">
                <div class="welcome-text">
                    @if (IsUserSignedIn)
                    {
                        <h1 class="text-primary">A Step For Better Future</h1>
                        <p class="start-chatting mt-3">Start chatting below to begin your career journey!</p>

                    }
                    else
                    {
                        <h1 class="text-primary">Welcome to Academic Bot</h1>
                        <p class="lead">Your AI-powered career counselor</p>
                        <button class="btn btn-primary signup-btn">Sign up for personalized and enhanced responses!</button>
                        <p class="start-chatting mt-3">Start chatting below to begin your career journey!</p>
                    }
                </div>
            </div>
        </div>
        <div id="chatMessages" class="chat-messages">
            <!-- Chat messages will be added here dynamically -->
        </div>
        <div class="suggestion-chips">
            <button class="chip" data-suggestion="Tell me about career options in computer science">Career in CS</button>
            <button class="chip" data-suggestion="What are the best universities for engineering?">Top engineering schools</button>
            <button class="chip" data-suggestion="How to prepare for a job interview?">Interview tips</button>
        </div>
        <div class="input-area">
            <input type="text" id="userInput" class="form-control" placeholder="Type your message...">
            <button id="sendBtn" class="btn btn-primary">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>
</div>

<style>
    :root {
        --primary-color: #6200EA;
        --secondary-color: #03DAC6;
        --background-color: white;
        --text-color: #333333;
        --sidebar-width: 300px;
        --navbar-height: 60px;
        --chat-width: 800px;
    }

    body {
        background-color: var(--background-color);
        margin: 0;
        padding: 0;
        height: 100vh;
        font-family: 'Roboto', sans-serif;
    }

    .chat-wrapper {
        display: flex;
        height: calc(100vh - var(--navbar-height));
        background-color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 0;
        overflow: hidden;
    }

        .chat-wrapper.centered-chat {
            justify-content: center;
            align-items: center;
            background-color: var(--background-color);
        }

    .sidebar {
        width: var(--sidebar-width); /* Ensure the width is fixed */
        background-color: #f8f9fa;
        border-right: 1px solid #e0e0e0;
        display: flex;
        flex-direction: column;
        flex-shrink: 0; /* Prevent the sidebar from shrinking */
    }

    .main-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }


    .sidebar-header {
        padding: 1rem;
        /* background-color: var(--primary-color); */
        color: var(--primary-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 5px solid var(--primary-color)
    }

    .sidebar-footer {
        padding: 15px;
        border-top: 3px solid #e0e0e0;
        font-weight: 900;
        position: absolute;
        bottom:0;
    }
    .main-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

        .main-content.centered-content {
            max-width: var(--chat-width);
            height: 80vh;
            border-radius: 10px;
            /* box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); */
            box-shadow: 0 4px 6px rgb(0 0 0 / 43%);
        }

    .chat-container {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        background-color: #ffffff;
        overflow: hidden;
    }

    .chat-messages {
        flex: 1;
        padding: 2rem;
        overflow-y: auto;
    }

    /* .welcome-message, .chat-messages {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        } */

    /*  .welcome-message {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            /* background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); */
    /* color: white; */
    /* }  */

    /*  .welcome-message h1 {
                font-size: 2.5rem;
                margin-bottom: 1rem;
                color: #ffffff;
            } */
    .welcome-message {
        /* background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); */
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        border-radius: 10px;
        margin: 2rem;
        animation: fadeIn 1s ease-out;
    }

        .welcome-message h1 {
            font-family: 'Poppins', sans-serif;
            font-weight: 700;
            font-size: 3rem;
            margin-bottom: 1rem;
            /* color: #ffffff; */
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

    /*  .welcome-message .lead {
                font-size: 1.2rem;
                margin-bottom: 2rem;
            } */
    .welcome-text {
        text-align: center;
        /* color: #ffffff; */
        z-index: 2;
    }

    .signup-btn {
        background-color: var(--secondary-color);
        border: none;
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 25px;
        font-weight: bold;
        margin-top: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .signup-btn:hover {
            background-color: #02b8a7;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }

    .message {
        max-width: 80%;
        margin-bottom: 1rem;
        padding: 0.75rem 1rem;
        border-radius: 20px;
        line-height: 1.4;
        animation: fadeIn 0.3s ease-out;
    }

    .user {
        background-color: #E8F0FE;
        color: var(--text-color);
        align-self: flex-end;
        margin-left: auto;
    }

    .bot {
        background-color: #F1F3F4;
        color: var(--text-color);
    }

    .input-area {
        display: flex;
        padding: 1rem;
        background-color: #ffffff;
        border-top: 1px solid #e0e0e0;
    }

    #userInput {
        flex-grow: 1;
        margin-right: 0.5rem;
        border: 1px solid #e0e0e0;
        padding: 0.75rem;
        border-radius: 25px;
        transition: all 0.3s ease;
    }

        #userInput:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(98, 0, 234, 0.2);
        }

    #sendBtn {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: var(--primary-color);
        border: none;
        transition: all 0.3s ease;
    }

        #sendBtn:hover {
            background-color: #5000d3;
            transform: scale(1.05);
        }

    #newChatBtn
    {
        color:white;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: var(--primary-color);
        border: none;
        transition: all 0.3s ease;
    }

        #newChatBtn:hover {
        background-color: #5000d3;
        transform: scale(1.05);
    }

    .chat-history {
        /* flex-grow: 1; */
        overflow-y: auto;
    }

    .chat-history-item {
        cursor: pointer;
        padding: 15px;
        border-bottom: 1px solid #e0e0e0;
        transition: all 0.3s ease;
        overflow: hidden; /* Ensures content doesn't overflow */
        text-overflow: ellipsis; /* Adds the ellipsis */
        white-space: nowrap; /* Prevents the text from wrapping to a new line */
    }

        .chat-history-item:hover {
            background-color: #f0f0f0;
        }

        .chat-history-item.active {
            background-color: #E8F0FE;
            border-left: 4px solid var(--primary-color);
        }

    .suggestion-chips {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        padding: 10px;
        border-top: 1px solid #e0e0e0;
    }

    .chip {
        background-color: #f0f0f0;
        border: none;
        padding: 8px 15px;
        border-radius: 20px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .chip:hover {
            background-color: #e0e0e0;
        }

    .message.generating {
        font-style: italic;
        color: #888;
    }

        .message.generating::after {
            content: '...';
            display: inline-block;
            width: 20px;
            text-align: left;
            animation: dots 1.5s steps(5, end) infinite;
        }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes dots {
        0%, 20% {
            color: rgba(0,0,0,0);
            text-shadow: .25em 0 0 rgba(0,0,0,0), .5em 0 0 rgba(0,0,0,0);
        }

        40% {
            color: #888;
            text-shadow: .25em 0 0 rgba(0,0,0,0), .5em 0 0 rgba(0,0,0,0);
        }

        60% {
            text-shadow: .25em 0 0 #888, .5em 0 0 rgba(0,0,0,0);
        }

        80%, 100% {
            text-shadow: .25em 0 0 #888, .5em 0 0 #888;
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .chat-wrapper {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            max-height: 30vh;
            border-right: none;
            border-bottom: 1px solid #e0e0e0;
        }

        .main-content.centered-content {
            width: 95%;
            height: 90vh;
        }
    }
</style>

@section Scripts {
    <script src="https://unpkg.com/@@popperjs/core@2"></script>
    <script src="https://unpkg.com/tippy.js@6"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const welcomeMessage = document.getElementsByClassName('chat-container')[0];
            const chatMessages = document.getElementById('chatMessages');
            const userInput = document.getElementById('userInput');
            const sendBtn = document.getElementById('sendBtn');
            const chatHistory = document.getElementById('chatHistory');
            const newChatBtn = document.getElementById('newChatBtn');
            const suggestionChips = document.querySelectorAll('.chip');
            const suggestionChipElement = document.querySelectorAll('.suggestion-chips')[0];
            let currentChatId = null;

            if (chatHistory != null) {
                chatHistory.addEventListener('click', (event) => {
                    const target = event.target;
                    if (target.classList.contains('chat-history-item')) {
                        currentChatId = target.getAttribute('data-chat-id');
                        loadChatHistory(currentChatId);
                    }
                });


                newChatBtn.addEventListener('click', () => {
                    currentChatId = null;
                    chatMessages.innerHTML = '';
                    welcomeMessage.style.display = 'flex';
                    document.querySelectorAll('.chat-history-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    if (suggestionChipElement.style.display == 'none') {
                        suggestionChipElement.style.display = 'block';
                    }
                });
            }

            sendBtn.addEventListener('click', sendMessage);
            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            suggestionChips.forEach(chip => {
                chip.addEventListener('click', () => {
                    userInput.value = chip.dataset.suggestion;
                    sendMessage();
                });
            });

            function sendMessage() {
                const message = userInput.value.trim();
                if (message === '') return;
                let value = null;
                if ($('#flexSwitchCheckDefault').is(':checked')) {
                    value = true;
                } else {
                    value = false;
                }

                addMessageToChat('user', message);
                userInput.value = '';
                userInput.disabled = true;
                sendBtn.disabled = true;
                const generatingElement = addMessageToChat('bot generating', 'Generating response...');
                chatMessages.scrollTop = chatMessages.scrollHeight;
                if (welcomeMessage.style.display !== 'none') {
                    welcomeMessage.style.display = 'none';
                }
                if (suggestionChipElement.style.display !== 'none') {
                    suggestionChipElement.style.display = 'none';
                }

                $.ajax({
                    type: "GET",
                    url: "/Index?handler=CallRagAPI",  // Adjust the URL to match your Razor Page
                    data: {
                        userInput: message,
                        includeBackground:value,
                        chatID: currentChatId
                    },
                    success: function (response) {
                        

                        if (response.success) {
                            if (response.chatId == currentChatId) {
                                generatingElement.remove();
                                addMessageToChat('bot', formatResponse(response.message));
                                if (currentChatId == null) {
                                    addChatHistoryItem(response.chatId, message);
                                    currentChatId = chatId
                                }
                            }
                        } else {
                            generatingElement.remove();
                            addMessageToChat('bot', "Something Went Wrong ! Try again.");
                            console.log(response.message.result)
                        }
                        userInput.disabled = false;
                        sendBtn.disabled = false;
                    },
                    error: function (xhr, status, error) {
                        userInput.disabled = false;
                        sendBtn.disabled = false;
                        generatingElement.remove();
                        addMessageToChat('bot', "Something Went Wrong ! Try again.");
                        console.log("Error: " + error);
                    }
                });
            }

            function addMessageToChat(sender, message) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message', ...sender.split(' '));
                messageElement.innerHTML = message.replace(/\n\n/g, '<br>');
                chatMessages.appendChild(messageElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                return messageElement;
            }

            function loadChatHistory(chatId) {
                // Clear current chat messages
                chatMessages.innerHTML = '';
                if (suggestionChipElement.style.display !== 'none') {
                    suggestionChipElement.style.display = 'none';
                }
                $.ajax({
                    type: "GET",
                    url: "/Index?handler=GetChatHistory",  // Adjust the URL to match your Razor Page
                    data: {
                        chatID: chatId
                    },
                    success: function (response) {
                        if (welcomeMessage.style.display !== 'none') {
                            welcomeMessage.style.display = 'none';
                        }
                        response.data.forEach(dt => {
                            addMessageToChat(dt.sender, formatResponse(dt.content));
                        });
                    },
                    error: function (xhr, status, error) {
                        if (welcomeMessage.style.display !== 'none') {
                            welcomeMessage.style.display = 'none';
                        }
                        addMessageToChat('bot', "Something Went Wrong ! Try again.");
                    }
                });
                document.querySelectorAll('.chat-history-item').forEach(item => {
                    item.classList.remove('active');
                    if (item.dataset.chatId == chatId) {
                        item.classList.add('active');
                    }
                });
            }

            // Initialize tooltips
            tippy('[data-tippy-content]');

            // Populate chat history on load
            // populateChatHistory();

            function formatResponse(response) {
                // Remove quotes and replace \n\n with single line breaks
                return response.replace(/^"|"$/g, '').replace(/\\n/g, '<br>').trim();

            }
            // Function to add a new chat history item
            function addChatHistoryItem(chatId, chatSummary) {
                const chatItem = document.createElement('div');
                chatItem.classList.add('chat-history-item');
                chatItem.setAttribute('data-chat-id', chatId);
                chatItem.textContent = chatSummary;
                chatItem.classList.add('active');
                chatHistory.insertBefore(chatItem, chatHistory.firstChild);
            }

            $('#flexSwitchCheckDefault').change(function () { 
                debugger;
                let value = null;
                if ($(this).is(':checked')) {
                    value = true;
                } else {
                    value = false;
                }
                $.ajax({
                    type: "GET",
                    url: "/Index?handler=UpdateSetting",  // Adjust the URL to match your Razor Page
                    data: {
                        checkedvalue: value
                    },
                    success: function (response) {
                    },
                    error: function (xhr, status, error) {
                        alert(error);
                    }
                });
            });
        });
    </script>
}



