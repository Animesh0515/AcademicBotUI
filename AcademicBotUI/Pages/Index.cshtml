 @page
@using AcademicBotUI.Entity
 @using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@model IndexModel
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@{
    // Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academic Bot</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <style>

        :root {
            --primary-color: #4a90e2;
            --secondary-color: #f0f4f8;
            --text-color: #333;
            --bot-message-color: #e9ecef;
            --user-message-color: #d4edda;
            --navbar-height: 60px;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--secondary-color);
            color: var(--text-color);
            display: flex;
            flex-direction: column;
        }

        .navbar {
            background-color: #ffffff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            height: var(--navbar-height);
            flex-shrink: 0;
        }

        .navbar-brand {
            font-weight: bold;
            color: var(--primary-color);
        }

        .chat-container {
            max-width: 800px;
            width: 90%;
            height: calc(100vh - var(--navbar-height) - 40px); /* Adjust 40px as needed for margins */
            margin: 20px auto;
            display: flex;
            flex-direction: column;
            background-color: #ffffff;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .welcome-message, .chat-messages {
            flex: 1;
            padding: 1rem;
        }

        .chat-messages {
            overflow-y: auto;
        }

        .welcome-message {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

            .welcome-message h1 {
                color: var(--primary-color);
                font-size: 2.5rem;
                margin-bottom: 1rem;
            }

            .welcome-message p {
                color: var(--text-color);
                font-size: 1.2rem;
            }

        .signup-highlight {
            background-color: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            display: inline-block;
            margin-top: 1rem;
            font-weight: bold;
        }

        .start-chatting {
            margin-top: 1rem;
            font-style: italic;
        }

        .message {
            max-width: 80%;
            margin-bottom: 1rem;
            padding: 0.75rem 1rem;
            border-radius: 20px;
            line-height: 1.4;
        }

        .user {
            background-color: var(--user-message-color);
            color: var(--text-color);
            align-self: flex-end;
            margin-left: auto;
        }

        .bot {
            background-color: var(--bot-message-color);
            color: var(--text-color);
        }

        .input-area {
            display: flex;
            padding: 1rem;
            background-color: #ffffff;
            border-top: 1px solid #e0e0e0;
        }

        #userInput {
            flex-grow: 1;
            margin-right: 0.5rem;
            border: 1px solid #e0e0e0;
            padding: 0.5rem;
        }

        #sendBtn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: var(--primary-color);
            color: white;
            border: none;
            cursor: pointer;
        }

            #sendBtn i {
                font-size: 1.2rem;
            }

        .message.generating {
            font-style: italic;
            color: #888;
        }

            .message.generating::after {
                content: '...';
                display: inline-block;
                width: 20px;
                text-align: left;
                animation: dots 1.5s steps(5, end) infinite;
            }

        @@keyframes dots {
            0%, 20% {
                color: rgba(0,0,0,0);
                text-shadow: .25em 0 0 rgba(0,0,0,0), .5em 0 0 rgba(0,0,0,0);
            }

            40% {
                color: #888;
                text-shadow: .25em 0 0 rgba(0,0,0,0), .5em 0 0 rgba(0,0,0,0);
            }

            60% {
                text-shadow: .25em 0 0 #888, .5em 0 0 rgba(0,0,0,0);
            }

            80%, 100% {
                text-shadow: .25em 0 0 #888, .5em 0 0 #888;
            }
        }

    </style>
</head>
<body>
    <div>
       @*  <nav class="navbar navbar-expand-lg navbar-light">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">
                    <i class="fas fa-robot me-2"></i>Academic Bot
                </a>
                @if (!SignInManager.IsSignedIn(User))
                {
                    <div class="ms-auto">
                        <a class="btn btn-outline-primary me-2" asp-area="Identity" asp-page="/Account/Register">Register</a>
                        <a class="btn btn-primary" asp-area="Identity" asp-page="/Account/Login">Login</a>
                    </div>
                }
                else
                {
                    <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                        <button type="submit" class="btn btn-danger">Logout</button>
                    </form>
                }
            </div>
        </nav> *@

        <div class="chat-container">
            <div id="welcomeMessage" class="welcome-message">
                <h1>Welcome to Academic Bot</h1>
                <p>Your AI-powered carrer counsellor</p>
                <p class="signup-highlight">Sign up for personalized and enhanced responses!</p>
                <p class="start-chatting">Start chatting below to begin your carrer journey!</p>
            </div>
            <div id="chatMessages" class="chat-messages">
                <!-- Chat messages will be added here dynamically -->
            </div>
            <div class="input-area">
                <input type="text" id="userInput" class="form-control" placeholder="Type your message...">
                <button id="sendBtn" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script>

        document.addEventListener('DOMContentLoaded', () => {
            const welcomeMessage = document.getElementById('welcomeMessage');
            const chatMessages = document.getElementById('chatMessages');
            const userInput = document.getElementById('userInput');
            const sendBtn = document.getElementById('sendBtn');
            const loginBtn = document.getElementById('loginBtn');
            const signupBtn = document.getElementById('signupBtn');

            sendBtn.addEventListener('click', sendMessage);
            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });



            function sendMessage() {
                debugger;
                const message = userInput.value.trim();
                userInput.disabled = true;
                sendBtn.disabled = true;
                addMessageToChat('user', message);
                // generatingResponse.style.display = 'block';
                const generatingElement = addMessageToChat('bot generating', 'Generating response...');
                chatMessages.scrollTop = chatMessages.scrollHeight;
                if (welcomeMessage.style.display !== 'none') {
                    welcomeMessage.style.display = 'none';
                }
                userInput.value = '';
                $.ajax({
                    type: "GET",
                    url: "/Index?handler=CallRagAPI",  // Adjust the URL to match your Razor Page
                    data: {
                        userInput: message
                    },
                    success: function (response) {
                        debugger;
                        userInput.disabled = false;
                        sendBtn.disabled = false;

                        if (response.success) {
                            generatingElement.remove();
                            addMessageToChat('bot', formatResponse(response.message.result));
                        } else {
                            generatingElement.remove();
                            addMessageToChat('bot', "Something Went Wrong ! Try again.");
                            console.log(response.message.result)
                        }
                    },
                    error: function (xhr, status, error) {
                        userInput.disabled = false;
                        sendBtn.disabled = false;
                        generatingElement.remove();
                        addMessageToChat('bot', "Something Went Wrong ! Try again.");
                        console.log("Error: " + error);
                    }
                });

            }

            function addMessageToChat(sender, message) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message', ...sender.split(' '));
                messageElement.innerHTML = message.replace(/\n\n/g, '<br>');
                // messageElement.textContent = message;
                chatMessages.appendChild(messageElement);
                chatMessages.scrollTop = chatMessages.scrollHeight;
                return messageElement;
            }

            function formatResponse(response) {
                // Remove quotes and replace \n\n with single line breaks
                return response.replace(/^"|"$/g, '').replace(/\\n/g, '<br>').trim();

            }
        });
    </script>
</body>
</html>
